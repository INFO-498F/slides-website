install.packages('stmBrowser')
stmBrowser
install.packages('stm')
install.packages('stmBrowser')
# Week 1 Exercise: Create a visualization of the Challenger dataand publish it on the web!
# I've written out the syntax of each command following the task, and you should replace ALL_CAPS_WORDS with your variable names
# Install the rChart library: install.packages("PACKAGE_NAME", dependencies=TRUE)
install.packages("rCharts", dependencies=TRUE)
# Install Applined Linear Regression library named alr3: install.packages("PACKAGE_NAME", dependencies=TRUE)
install.packages("alr3", dependencies=TRUE)
# Load rCharts library:library(LIBRARY_NAME)
library(rCharts)
library(markdown)
# Load al3 library
library(alr3)
# Load in data frame named "challeng": data(DATA_FRAME_NAME)
# Variable descriptions live at http://www.stat.cmu.edu/~roeder/stat707/=data/=data/data/Rlibraries/alr3/html/challeng.html
data(challeng)
# Use the head command to see the first section of your challeng data frame: head(DATA_FRAME_NAME)
head(challeng)
# Look at the Temp column of your challeng data frame: DATA_FRAME$COLUMN_NAME
challeng$Temp
# Use R's built in plot function to create a scatterplot of the Fail column versus the Temp column: plot(Y_VARIABLE_NAME ~ X_VARIABLE_NAME, data=DATA_FRAME_NAME)
plot(Fail ~ Temp, data=challeng)
# Make a plot of Fail and Temp using the rCharts function nPlot: myPlot <- nPlot(Y_VARIABLE_NAME ~ X_VARIBLE_NAME, data=DATA_FRAME_NAME, type="scatterChart")
myPlot <- nPlot(Fail ~ Temp, data=challeng, type="scatterChart")
# Display your plot by simply entering your plot name
myPlot
# If you're short on time, skip to the last step (publish) now
# Change the xAxis label: myPlot$xAxis(axisLabel = "MY_LABEL_NAME").
myPlot$xAxis(axisLabel = 'Temperature')
# Increase the size of all points:  see http://stackoverflow.com/questions/28755068/increase-point-size-of-all-points-for-rcharts-nvd3/
myPlot$chart(sizeRange = c(500,500))
# Reprint your plot to see changes
myPlot
# Change the yAxis label using the same syntax
myPlot$yAxis(axisLabel = 'O-Ring Failures')
# Remove the legend: myPlot$chart(showLegend=FALSE)
myPlot$chart(showLegend=FALSE)
# Publish your chart to the web: myPlot$publish('CHART_NAME', host='rpubs')
myPlot$publish('Challenger', host="rpubs")
myPlot$publish('Challenger', host="rpubs")
install.packages('markdown')
library('markdown')
myPlot$publish('Challenger', host="rpubs")
data <- read.csv('/Users/mikefree/Desktop/smoking_data.csv')
head(data)
strip <- function(a) {
return a.split('(')[0]
}
strip('34.4(345, 345)')
strip <- function(a) {
return a.split('(')[0]
}
test <- '23423'
test
test.split(2)
strsplit('23423',4)
strip <- function(a) {
return strsplit(a,'(')[0]
}
strip <- function(a) {
return strsplit(a,'(')[0]
}
strip <- function(a) {
return strsplit(a,'(')
}
strip <- function(a) {
return (strsplit(a,'('))
}
strip(';lskdjf;lskj(s;dlkfjsdl')
strsplit('s;dlkfj(s;lkdjf','(')
strsplit('s;dlkfj(s;lkdjf','\(')
strsplit('s;dlkfj(s;lkdjf','//(')
strsplit('s;dlkfj(s;lkdjf','\\(')
strsplit('s;dlkfj(s;lkdjf','\\(')[0]
strsplit('s;dlkfj(s;lkdjf','\\(')[1]
strsplit('s;dlkfj(s;lkdjf','\\(')[1][1]
strsplit('s;dlkfj(s;lkdjf','\\(')[[1]]
len(strsplit('s;dlkfj(s;lkdjf','\\('))
length(strsplit('s;dlkfj(s;lkdjf','\\('))
unlist(strsplit('s;dlkfj(s;lkdjf','\\('))
unlist(strsplit('s;dlkfj(s;lkdjf','\\('))[1]
strip <- function(a) {
return (unlist(strsplit(a,'\\(')))[1]
}
strip('34.4(345, 345)')
strip('34.4(345, 345)')[1]
strip <- function(a) {
return (unlist(strsplit(a,'\\(')))[1][1]
}
strip('34.4(345, 345)')
strip <- function(a) {
return (unlist(strsplit(a,'\\(')))[1][1]
}
strip('34.4(345, 345)')
strip(34343(2343))
strip('34343(2343)')
strip <- function(a) {
return (unlist(strsplit(a,'\\(')))[1][1]
}
strip('34.4(345, 345)')
a <- '2343(234343'
strip <- function(a) {
return (unlist(strsplit(a,'\\('))[1][1])
}
strip('34.4(345, 345)')
for(i in names(data)){
print(i)
# data[i]
}
for(i in names(data)){
print(i[0]=='X')
# data[i]
}
for(i in names(data)){
print(i[1]=='X')
# data[i]
}
for(i,d in names(data)){
print(i,d)
# data[i]
}
counter <- 0
for(i in names(data)){
if(counter<3) {
counter++
next()
}
print(counter)
}
for(i in names(data)){
if(counter<3) {
counter <- counter + 1
next()
}
print(counter)
}
for(i in names(data)){
if(counter<3) {
counter <- counter + 1
next()
}
print(i)
}
counter <- 0
for(i in names(data)){
if(counter<3) {
counter <- counter + 1
next()
}
print(i)
}
i
test <- strip(data[i])
test <- apply(data[i], 1, strip)
head(test)
as.numeric('23.5 ')
counter <- 0
for(i in names(data)){
if(counter<3) {
counter <- counter + 1
next()
}
data[i] <- apply(data[i], 1, strip)
}
head(data)
write.csv(data, '/Users/mikefree/Desktop/smoking_data_prepped.csv')
install.packages(reshape)
install.packages('reshape')
library('reshape')
reshape(data, idvar = c('county', 'state'), timevar="sex", direction="wide")
x <- 10
x
x <- 10
y <- 20
z <- x * y
z
x
y
x <- 1
x[1]
x <- 'hello'
x
source(test-file.r)
source('test-file.r'')
source('test-file.r')
source('test-file.r')
release <- function() {
return "the kraken!!";
}
release <- function() {
return("the kraken!!")
}
x <- 1
name <- 'mike'
# write somthing
x <- 1
name <- 'mike'
# Here's a new section
name
x <- 2
# write somthing
x <- 1
name <- 'mike'
# Here's a new section
people <- c(Jim, Iman)
people <- c('Jim', 'Iman')
people
people[1]
people[2]
ages <- c(22, 23)
ages[1]
ages[2]
x <- 100
# Assign the value 200 to a variable y
y <- 200
# Combine x and y into a vector z
z <- c(x, y)
z
nums <- seq(1, 1000)
nums
z <- c(x, y, 1, 2)
only_third <- z[3]
numbers <- c(13, 15, 15)
numbers
length(numbers)
len <- length(numbers)
len
seq(1:4)
x <- 5
x
x[1]
?c
example(c)
### Numeric / character variables ###
# Create a variable 'puppies' equal to the number of puppies you'd like to have
# Create a variable 'cost', which is how expensive you think a puppy is
# Create a variable 'total_cost' that has the total cost of all of your puppies
# Assign your (intended/potential) major to a variable 'major'
# Use the paste command to create a  variable 'phrase'
# The 'phrase' variable should combine the string "My major is ", and the name of your major
### Vectors ###
# Create a vector 'classes', which is a list of all the classes you're currently taking
# Create a variable 'num_classes' by measuring the length of your 'classes' vector
# Create a variable 'favorite_class' by retrieving your favorite class out of the 'classes' vector
# Create a variable 'hours_per_week' that has the number of hours you spend working on each class
# Create a variable 'hard_week' in which you work 1.5x as long as a normal week
# Use the seq command to create a vector 'nums' with numbers 100 through 199
# Create a variable 'first_ten' which has the first 10 values in your 'nums' variable
############################
# Visualize dataset
############################
# Set directory, clear namespace
setwd('~/Documents/cisco-alf')
# rm(list=ls())
# Libraries
# install.packages('dplyr')
#install.packages('ggplot2')
# install.packages('packcircles')
# devtools::install_github("ropensci/plotly")
# install.packages('leaflet')
library(leaflet)
library(plotly)
library(ggplot2)
library(dplyr)
library(scales)
library(packcircles)
plotly('michael.k.freeman','sp7vchz0gd')
# Read in our the make_data function
source('make-data.r')
# Function to build charts
build_charts <- function(dataset) {
# Create visuals directory
dir.create('visuals', showWarnings = FALSE)
# Create common styles for plots
plot_style <- theme_bw() +
theme(legend.key = element_rect(color = NA), plot.title = element_text(family="Trebuchet MS", face="bold", size=20, hjust=0, color="#555555"))
# Profit by quarter
by_quarter <- summarize(group_by(dataset, quarter), tot=sum(price * unit))
ggplot(data=by_quarter,
aes(x=quarter, y=tot)) + geom_bar(stat='identity') + xlab('Quarter') + ylab('Sales(dollars)') +
ggtitle('Sales by Quarter') + scale_y_continuous(labels = dollar) +
plot_style
ggsave("visuals/profit_by_quarter.png", width=7, height=5)
# Profit by category
by_category <- summarize(group_by(dataset, quarter, category), tot=sum(price * unit))
ggplot(data=by_category,
aes(x=quarter,
y=tot,
group=category,
colour=category,
)) + geom_line() + xlab('Quarter') + ylab('Sales(dollars)') +
ggtitle('Sales by Category') + scale_y_continuous(labels = dollar, , limits=c(0, max(by_category$tot))) +
scale_color_discrete(name="Category") +
plot_style
ggsave("visuals/profit_by_category.png", width=7, height=5)
# Profit by product by quarter
by_item <- summarize(group_by(dataset, quarter, item), tot=sum(price * unit))
ggplot(data=by_item,
aes(x=quarter,
y=tot,
group=item,
colour=item,
)) + geom_line() + xlab('Quarter') + ylab('Sales(dollars)') + ggtitle('Sales by Product') +
scale_y_continuous(labels = dollar, limits=c(0, max(by_item$tot))) +
scale_color_discrete(name="Product") +
plot_style
ggsave("visuals/profit_by_product.png", width=7, height=5)
# Profit by cateogyr by city
by_city <- summarize(group_by(dataset, quarter, city), tot=sum(price * unit))
ggplot(data=by_city,
aes(x=quarter,
y=tot,
group=city,
colour=city,
)) + geom_line() + xlab('Quarter') + ylab('Sales(dollars)') + ggtitle('Sales by City') + scale_y_continuous(labels = dollar, limits=c(0, max(by_city$tot))) +
plot_style
ggsave("visuals/profit_by_store.png", width=7, height=5)
# By item and store
by_item_store <- summarize(group_by(dataset, quarter, city, item), tot=sum(price * unit))
ggplot(data=by_item_store, aes(x=quarter,y=tot, group=city, colour=city)) +
geom_line() +
facet_wrap(~item) +
xlab('Quarter') + ylab('Sales(dollars)') + ggtitle('City Sales (by product)') + scale_y_continuous(labels = dollar) +
plot_style
ggsave("visuals/profit_by_item_store.png", width=7, height=5)
# By category and store
by_category_store <- summarize(group_by(dataset, quarter, city, category), tot=sum(price * unit))
ggplot(data=by_category_store, aes(x=quarter,y=tot, group=city, colour=city)) +
geom_line() +
facet_wrap(~category) +
xlab('Quarter') + ylab('Sales(dollars)') + ggtitle('City Sales (by category)') + scale_y_continuous(labels = dollar) +
plot_style
ggsave("visuals/profit_by_category_city.png", width=7, height=5)
# By store and category
ggplot(data=by_category_store, aes(x=quarter,y=tot, group=category, colour=category)) +
geom_line() +
facet_wrap(~city) +
xlab('Quarter') + ylab('Sales(dollars)') + ggtitle('Category Sales (by city)') + scale_y_continuous(labels = dollar) +
plot_style
ggsave("visuals/profit_by_city_category.png", width=7, height=5)
# By store then item
ggplot(data=by_item_store, aes(x=quarter,y=tot, group=item, colour=item)) +
geom_line() +
facet_wrap(~city) +
xlab('Quarter') + ylab('Sales(dollars)') + ggtitle('Sales by Buyer') + scale_y_continuous(labels = dollar)+
plot_style
ggsave("visuals/profit_by_store_item.png", width=7, height=5)
# Create a new leaflet map
m <- leaflet()
# Add map tiles to your map: these are the images that constitute your map
m <- addTiles(m)
# By city
by_city <- summarize(group_by(dataset, city, lat, lng), tot=sum(price * unit))
m <- addCircleMarkers(m,
lng=by_city$lng,
lat=by_city$lat,
radius= by_city$tot/100000,
weight=1,
fillColor='black',
color='black',
)
m
# This is interactive, so a screenshot was taken to save the file
# Show barchart by city
ggplot(data=by_city,
aes(x=city, y=tot)) + geom_bar(stat='identity') + xlab('City') + ylab('Sales(dollars)') +
ggtitle('Sales by City') + scale_y_continuous(labels = dollar) +
plot_style
ggsave("visuals/profit_by_city.png", width=7, height=5)
# Pie chart by city
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(family="Trebuchet MS", face="bold", size=20, hjust=0, color="#555555")
)
ggplot(by_city, aes(x="", y=tot, fill=city)) + blank_theme + theme(axis.text.x=element_blank()) +
geom_bar(width = 1, stat = "identity") +
coord_polar("y", start=0) + geom_text(label='', size=0) + ggtitle('Sales by City')
ggsave("visuals/profit_by_city_pie.png", width=7, height=5)
# Heatmap
dataset$tot <- dataset$unit * dataset$price
dataset$quarter_store <- paste(sub('New York City', 'NYC', dataset$city), '(', dataset$quarter,')', sep="")
heatData <- reshape(dataset[c('tot', 'quarter_store', 'item')], timevar='quarter_store', idvar='item', direction="wide")
row.names(heatData) <- heatData$item
Profit <- data.matrix(heatData[,2:dim(heatData)[2]])
p <- plot_ly(z=Profit,
x=sub('tot.', '', colnames(Profit)),
y=row.names(Profit),
type='heatmap',
colorscale='YlGn',
) %>%
layout(xaxis = list(title=NA),
yaxis=list(title=NA),
margin=list(l=225),
title="Product Profit by City-Quarter"
)
plotly_IMAGE(p, width = 1000, height = 500, format = "png", scale = 2,
out_file = "visuals/heatmap.png")
}
# Make a dataset
sales_data <- make_data() # This would generate a *new* dataset
# sales_data <- read.csv('~/Documents/cisco-alf/data/cisco_alf_data.csv')
# Build charts
build_charts(sales_data)
x <- read.csv('~/Documents/INFO-498f/info498f-website/data/lectures.csv')
setwd('~/Documents/INFO-498f/info498f-website/data/)
setwd('~/Documents/INFO-498f/info498f-website/data/')
setwd('~/Documents/INFO-498f/info498f-website/data/')
x <- read.csv('lectures.csv')
x <- read.csv('lectures.csv')
x <- read.csv2('lectures.csv')
x
typeof(x)
dim(x)
x$id.title.description
typeof(x$id.title.description)
View(x$id.title.description)
x <- read.csv('lectures.csv')
x
class(x)
x$id
class(x$id)
typeof(x$id)
x$id
mode(x$id)
is.vector(x$id)
x$id[1]
x$id[2]
x$id[3]
x$id[4]
as.vector(x$id)
x$id
